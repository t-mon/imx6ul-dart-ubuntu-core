baudrate=115200
board_name=MX6UL_VAR_DART
boot_dev=sd
boot_fdt=try
bootdelay=1
bootenv=uboot.env
bootscript=echo Running bootscript from mmc ...; source
console=ttymxc0
ethact=FEC0
ethaddr=f8:dc:7a:1b:75:7a
ethprime=FEC0
fdt_addr=0x83000000
fdt_file=undefined
fdt_high=0xffffffff
findfdt=if test $fdt_file = undefined; then if test $boot_dev = sd; then if test $som_storage = emmc || test $som_storage = none; then if test $soc_type = imx6ull; then setenv fdt_file imx6ull-var-dart-sd_emmc.dtb; else setenv fdt_file imx6ul-var-dart-sd_emmc.dtb; fi; fi; if test $som_storage = nand; then if test $soc_type = imx6ull; then setenv fdt_file imx6ull-var-dart-sd_nand.dtb; else setenv fdt_file imx6ul-var-dart-sd_nand.dtb; fi; fi; fi; if test $boot_dev = emmc; then if test $wifi = yes; then if test $soc_type = imx6ull; then if test $som_rev = 5G; then setenv fdt_file imx6ull-var-dart-5g-emmc_wifi.dtb; else setenv fdt_file imx6ull-var-dart-emmc_wifi.dtb; fi; else if test $som_rev = 5G; then setenv fdt_file imx6ul-var-dart-5g-emmc_wifi.dtb; else setenv fdt_file imx6ul-var-dart-emmc_wifi.dtb; fi; fi; else if test $soc_type = imx6ull; then setenv fdt_file imx6ull-var-dart-sd_emmc.dtb; else setenv fdt_file imx6ul-var-dart-sd_emmc.dtb; fi; fi; fi; if test $boot_dev = nand; then if test $wifi = yes; then if test $soc_type = imx6ull; then if test $som_rev = 5G; then setenv fdt_file imx6ull-var-dart-5g-nand_wifi.dtb; else setenv fdt_file imx6ull-var-dart-nand_wifi.dtb; fi; else if test $som_rev = 5G; then setenv fdt_file imx6ul-var-dart-5g-nand_wifi.dtb; else setenv fdt_file imx6ul-var-dart-nand_wifi.dtb; fi; fi; else if test $soc_type = imx6ull; then setenv fdt_file imx6ull-var-dart-sd_nand.dtb; else setenv fdt_file imx6ul-var-dart-sd_nand.dtb; fi; fi; fi; if test $fdt_file = undefined; then echo WARNING: Could not determine dtb to use; fi; fi;
image=zImage
importbootenv=echo Importing bootenv from mmc ...; env import -t ${loadaddr} ${filesize}
initrd_high=0xffffffff
ip_dyn=yes
loadaddr=0x82000000
loadbootenv=load mmc ${mmcdev}:${mmcbootpart} ${loadaddr} ${bootdir}/${bootenv}
loadbootscript=load mmc ${mmcdev}:${mmcbootpart} ${loadaddr} ${bootdir}/${script};
loadfdt=run findfdt; echo fdt_file=${fdt_file}; load mmc ${mmcdev}:${mmcbootpart} ${fdt_addr} ${bootdir}/${fdt_file}
loadimage=load mmc ${mmcdev}:${mmcbootpart} ${loadaddr} ${bootdir}/${image}
mmcargs=setenv bootargs console=${console},${baudrate} root=/dev/mmcblk${mmcblk}p${mmcrootpart} rootwait rw ${cma_size}
mmcautodetect=yes
mmcblk=0
mmcboot=echo Booting from mmc ...; run mmcargs; run optargs; if test ${boot_fdt} = yes || test ${boot_fdt} = try; then if run loadfdt; then bootz ${loadaddr} - ${fdt_addr}; else if test ${boot_fdt} = try; then bootz; else echo WARN: Cannot load the DT; fi; fi; else bootz; fi
mmcbootpart=1
mmcdev=0
mmcrootpart=2
netargs=setenv bootargs console=${console},${baudrate} root=/dev/nfs rw ${cma_size}ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp
netboot=echo Booting from net ...; run netargs; run optargs; if test ${ip_dyn} = yes; then setenv get_cmd dhcp; else setenv get_cmd tftp; fi; ${get_cmd} ${image}; if test ${boot_fdt} = yes || test ${boot_fdt} = try; then run findfdt; echo fdt_file=${fdt_file}; if ${get_cmd} ${fdt_addr} ${fdt_file}; then bootz ${loadaddr} - ${fdt_addr}; else if test ${boot_fdt} = try; then bootz; else echo WARN: Cannot load the DT; fi; fi; else bootz; fi;
optargs=setenv bootargs ${bootargs} ${kernelargs};
panel=VAR-WVGA-LCD
ramsize_check=if test $sdram_size -lt 256; then setenv cma_size cma=32MB; setenv fdt_addr 0x84000000; setenv loadaddr 0x84600000; else if test $sdram_size -lt 512; then setenv cma_size cma=64MB; fi; fi;
script=boot.scr
sdram_size=512
soc_type=imx6ull
som_rev=2.4G
som_storage=nand
splashdisable=setenv splashfile; setenv splashimage
splashenable=setenv splashfile /boot/splash.bmp; setenv splashimage 0x83100000
splashfile=/boot/splash.bmp
splashimage=0x83100000
splashsource=sd
splashsourceauto=yes
usbnet_devaddr=f8:dc:7a:00:00:02
usbnet_hostaddr=f8:dc:7a:00:00:01
wifi=yes


kernel_file=kernel.img
initrd_file=initrd.img
initrd_addr=0x84000000
loadfiles=echo ==> Load files ...; run loadkernel; run loadfdt; run loadinitrd
loadkernel=echo --> Load kernel ${mmcdev}:${mmcbootpart} ${loadaddr} ${snap_kernel}/${kernel_file}; load mmc ${mmcdev}:${mmcbootpart} ${loadaddr} ${snap_kernel}/${kernel_file}
loadfdt=run findfdt; echo --> Load dts ${mmcdev}:${mmcbootpart} ${fdt_addr} ${snap_kernel}/dtbs/${fdt_file}; load mmc ${mmcdev}:${mmcbootpart} ${fdt_addr} ${snap_kernel}/dtbs/${fdt_file}
loadinitrd=echo --> Load initrd ${mmcdev}:${mmcbootpart} ${initrd_addr} ${snap_kernel}/${initrd_file}; load mmc ${mmcdev}:${mmcpart} ${initrd_addr} ${snap_kernel}/${initrd_file}; setenv initrd_size ${filesize}

mmcrootfstype=ext4 rootwait             
mmcargs=setenv bootargs root=${mmcroot} rootfstype=${mmcrootfstype} ${cma_size}
snappy_cmdline=rng_core.default_quality=700 net.ifnames=0 init=/lib/systemd/systemd ro panic=-1 fixrtc
snappy_boot=if test "${snap_mode}" = "try"; then setenv snap_mode "trying"; saveenv; if test "${snap_try_core}" != ""; then setenv snap_core "${snap_try_core}"; fi; if test "${snap_try_kernel}" != ""; then setenv snap_kernel "${snap_try_kernel}"; fi; elif test "${snap_mode}" = "trying"; then setenv snap_mode ""; saveenv; fi; run loadfiles; setenv mmcroot "/dev/disk/by-label/writable ${snappy_cmdline} snap_core=${snap_core} snap_kernel=${snap_kernel}"; run mmcargs; bootz ${loadaddr} ${initrd_addr}:${initrd_size} ${fdt_addr}

bootcmd=run ramsize_check; mmc dev ${mmcdev}; if mmc rescan; then if run loadbootenv; then run importbootenv; fi; run snappy_boot; fi; run netboot; 
